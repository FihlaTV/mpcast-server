import { IPaginationOptions, Pagination } from '../../common/paginate';
import { ID } from '../../common/shared-types';
import { EUserPostsBehavior } from '../../common/types/common-types';
import { PostEntity, PostMeta, UserEntity } from '../../entity';
import { CategoriesService, OptionService } from '..';
import { Connection, Repository } from 'typeorm';
export declare class PostService {
    private connection;
    private readonly usersRepository;
    private readonly postRepository;
    private readonly categoriesService;
    private readonly optionService;
    constructor(connection: Connection, usersRepository: Repository<UserEntity>, postRepository: Repository<PostEntity>, categoriesService: CategoriesService, optionService: OptionService);
    findById(id: ID): Promise<PostEntity>;
    loadBLock(blocks: number[]): Promise<any[]>;
    getFormatData(item: PostEntity): Promise<PostEntity>;
    private getAttachmentInfo;
    private getAudios;
    paginate(options: IPaginationOptions): Promise<Pagination<PostEntity>>;
    getFromCategory(categorySlug: string, status?: string, querys?: any): Promise<{
        id: string;
        author: string | number;
        status: string;
        guid?: string | undefined;
        allowComment: number;
        menuOrder?: number | undefined;
        block?: JSON | undefined;
        sort: number;
        createdAt: string;
        updateAt: string;
        commentNum?: number | undefined;
        parent: number;
        mimeType?: string | undefined;
        password?: string | undefined;
        title: string;
        name?: string | undefined;
        excerpt?: string | undefined;
        type: string;
        content: string;
        category: string;
        metas?: PostMeta[] | undefined;
    }[]>;
    getPopular(isRandom?: boolean, limit?: number): Promise<any>;
    getNews(limit: number): Promise<any>;
    getStickys(stickys: [number], querys?: any): Promise<any[]>;
    findAllByType(postType: any, userId: number, take: number): Promise<PostEntity[]>;
    getAttachment(postId: number, type?: string): Promise<any>;
    getAttachments(ids: number[]): Promise<PostMeta[]>;
    countByBehavior(behavior: EUserPostsBehavior, postId: ID): Promise<any>;
    getUsersByBehavior(behavior: EUserPostsBehavior, postId: ID): Promise<any>;
    newViewer(userId: ID, postId: ID, ip: any): Promise<import("typeorm").UpdateResult>;
    updateViewer(userId: ID, postId: ID, ip: any): Promise<import("typeorm").UpdateResult>;
}
